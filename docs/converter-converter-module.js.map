{"version":3,"sources":["./src/app/converter/service/usa-converter.service.ts","./src/app/converter/converter/converter.component.ts","./src/app/converter/converter/converter.component.html","./src/app/converter/service/converter.service.ts","./src/app/converter/culture-converter/culture-converter.component.ts","./src/app/converter/culture-converter/culture-converter.component.html","./src/app/converter/service/culture-converter.service.ts","./src/app/converter/converter.module.ts","./src/app/converter/service/europe-converter.service.ts","./src/app/converter/converter-routing.module.ts"],"names":[],"mappings":"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","file":"converter-converter-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ConverterService } from './converter.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsaConverterService {\r\n  sourceCulture = 'Europe';\r\n  targetCulture = 'USA';\r\n\r\n  constructor(private converterService: ConverterService) { }\r\n\r\n  convertDistance = this.converterService.fromKilometersToMiles;\r\n\r\n  convertTemperature = this.converterService.fromCelsiusToFarenheit;\r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ConverterService } from '../service/converter.service';\r\n\r\n@Component({\r\n  selector: 'app-converter',\r\n  templateUrl: './converter.component.html',\r\n  styles: [\r\n  ]\r\n})\r\nexport class ConverterComponent implements OnInit {\r\n  public kilometers = 0;\r\n  public miles: number;\r\n  constructor(private converterService: ConverterService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.convert();\r\n  }\r\n\r\n  public convert(): void {\r\n    this.miles = this.converterService.fromKilometersToMiles(this.kilometers);\r\n  }\r\n\r\n}\r\n","<h2> Distance Converter.</h2>\r\n<h3> From Europe to USA </h3>\r\n<form>\r\n  <fieldset>\r\n    <section>\r\n      <label for=\"kilometers\">Kilometers</label>\r\n      <input name=\"kilometers\" type=\"number\" [(ngModel)]=\"kilometers\" placeholder=\"0\" />\r\n    </section>\r\n  </fieldset>\r\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\">\r\n</form>\r\n<section>\r\n  <h4>{{ miles | number:'1.2-2' }} miles</h4>\r\n</section>\r\n","import { Injectable } from '@angular/core';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConverterService {\r\n\r\n  constructor() { }\r\n\r\n  public fromKilometersToMiles = (kilometers) => kilometers * 0.62137;\r\n\r\n  public fromMilesToKilometers = (miles) => miles * 1.609;\r\n\r\n  public fromCelsiusToFarenheit = (celsius) => celsius * (9 / 5) + 32;\r\n\r\n  public fromFarenheitToCelsius = (farenheit) => (farenheit-32)*(5/9);\r\n\r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CultureConverterService } from '../service/culture-converter.service';\r\n\r\n@Component({\r\n  selector: 'app-culture-converter',\r\n  templateUrl: './culture-converter.component.html',\r\n  styles: [\r\n  ]\r\n})\r\nexport class CultureConverterComponent implements OnInit {\r\n  public source: string;\r\n  public target: string;\r\n  public sourceUnits = 0;\r\n  public targetUnits: number;\r\n\r\n  constructor(private cultureConverterService: CultureConverterService) { }\r\n\r\n  public ngOnInit(): void {\r\n    this.source = this.cultureConverterService.sourceCulture;\r\n    this.target = this.cultureConverterService.targetCulture;\r\n    this.convert();\r\n  }\r\n\r\n\r\n  public convert(): void {\r\n    this.targetUnits = this.cultureConverterService.convertDistance(this.sourceUnits);\r\n  }\r\n}\r\n","<p>culture-converter works!</p>\r\n<h2> Culture Converter.</h2>\r\n<h3> From {{ source }} to {{ target }} </h3>\r\n<form>\r\n  <fieldset>\r\n    <section>\r\n      <label for=\"sourceUnits\">Distance</label>\r\n      <input name=\"sourceUnits\" type=\"number\" [(ngModel)]=\"sourceUnits\" placeholder=\"0\" />\r\n    </section>\r\n  </fieldset>\r\n  <input value=\"Convert\" type=\"button\" (click)=\"convert()\">\r\n</form>\r\n<section>\r\n  <h4>Distance {{ targetUnits | number:'1.2-2' }} </h4>\r\n</section>\r\n","import { Injectable } from '@angular/core';\r\nimport { CultureConverter } from '../models/culture-converter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CultureConverterService implements CultureConverter {\r\n  sourceCulture: string;\r\n  targetCulture: string;\r\n\r\n\r\n  constructor() { }\r\n\r\n  convertDistance: (source: number) => number;\r\n\r\n  convertTemperature: (source: number) => number;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ConverterRoutingModule } from './converter-routing.module';\r\nimport { ConverterComponent } from './converter/converter.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CultureConverterComponent } from './culture-converter/culture-converter.component';\r\nimport { CultureConverterService } from './service/culture-converter.service';\r\nimport { UsaConverterService } from './service/usa-converter.service';\r\nimport { EuropeConverterService } from './service/europe-converter.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ConverterService } from './service/converter.service';\r\n\r\nconst cultureFactory = (converterService: ConverterService) => {\r\n  if (environment.unitsCulture === 'metric') {\r\n  return new EuropeConverterService(converterService);\r\n  } else {\r\n  return new UsaConverterService(converterService);\r\n  }\r\n  };\r\n\r\n@NgModule({\r\n  declarations: [ConverterComponent, CultureConverterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ConverterRoutingModule,\r\n    FormsModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: CultureConverterService,\r\n      useFactory: cultureFactory,\r\n      deps: [ConverterService]\r\n    }\r\n  ]\r\n})\r\nexport class ConverterModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { ConverterService } from './converter.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EuropeConverterService {\r\n  sourceCulture = 'USA';\r\n  targetCulture = 'Europe';\r\n\r\n  constructor(private converterService: ConverterService) { }\r\n\r\n  convertDistance = this.converterService.fromMilesToKilometers;\r\n\r\n  convertTemperature = this.converterService.fromFarenheitToCelsius;\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConverterComponent } from './converter/converter.component';\r\nimport { CultureConverterComponent } from './culture-converter/culture-converter.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ConverterComponent\r\n  },\r\n  {\r\n    path: 'culture',\r\n    component: CultureConverterComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ConverterRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}